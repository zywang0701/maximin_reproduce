setwd("~/Dropbox/Maximin-Simulation-Cluster/Simulations-Organized/others")
set.seed(0)
setting.outer = 2
returnList.outer <- intervals.100(setting.outer)
point.est.outer = returnList.outer$point.est
source("../../source/gendata.R")
source("../../source/MaximinInference.R")
source("../../source/helper_functions.R")
source("../../source/source_functions.R")
library(MASS)
library(CVXR)
library(glmnet)
library(intervals)
library(ggplot2)
setwd("C:/Users/Zhenyu Wang/Dropbox/Maximin-Simulation-Cluster/summary-report")
setting.set.outer = c(1,2,4,5,6,7,8,9)
delta = 0
intervals.100 = function(setting){
n = 500
gen.size = 100
if(setting==1){
# The number of groups
L = 2
# dimension
p = 500
# covariance matrix
cov.source = cov.gen(p, 0.6)
cov.target = cov.source
# generate mean for source and target data
mean.source = rep(0, p)
mean.target = rep(0, p)
# coefs
perb<-0.1
Bs<-matrix(0,p,L)
Bs[1:10,1]<-seq(1:10)/40
Bs[499,1]<-perb
Bs[500,1]<-perb
Bs[22:23,1]<-1
for(j in 2:L){
Bs[1:10,j]<-Bs[1:10,1]
Bs[500,j]<-3*perb
Bs[22:23,j]<-1
}
# loading
loading = rep(0, p)
loading[500] = 1
# Ns
Ns = rep(n, L)
}
if(setting==2){
# The number of groups
L = 2
# dimension
p = 500
# covariance matrix
cov.source = cov.gen(p, 0.6)
cov.target = cov.source
for(i in 1:p) cov.target[i, i] = 1.5
for(i in 1:5){
for(j in 1:5){
if(i!=j) cov.target[i, j] = 0.9
}
}
for(i in 499:500){
for(j in 499:500){
if(i!=j) cov.target[i, j] = 0.9
}
}
# generate mean for source and target data
mean.source = rep(0, p)
mean.target = rep(0, p)
# coefs
Bs = matrix(0, p, L)
Bs[1:10, 1] = seq(1:10)/40
Bs[22:23,1] = 1
Bs[498,1] = 0.5
Bs[499,1] = -0.5
Bs[500,1] = -0.5
Bs[1:10, 2] = Bs[1:10, 1]
Bs[22:23, 2] = 1
Bs[500, 2] = 1
# loading
loading = rep(0, p)
loading[498:500] = 1
# Ns
Ns = rep(n, L)
# number of samples for target
N.target = 2000
}
if(setting==4){
# The number of groups, L={2}
L = 2
# dimension
p = 500
# covariance matrix
cov.source = cov.gen(p, 0.6)
cov.target = cov.source
diag(cov.target) = diag(cov.target) + 0.5
for(i in 1:5){
for(j in 1:5){
if(i!=j) cov.target[i, j] = 0.6
}
}
for(i in 499:500){
for(j in 499:500){
if(i!=j) cov.target[i, j] = -0.9
}
}
# generate mean for source and target data
mean.source = rep(0, p)
mean.target = rep(0, p)
# coefs
Bs = matrix(0, p, L)
Bs[1:10, 1] = seq(1:10)/40
Bs[22:23, 1] = 1
Bs[498,1] = 0.5
Bs[499,1] = -0.5
Bs[500,1] = -0.5
Bs[1:10, 2] = Bs[1:10, 1]
Bs[22:23, 2] = 1
Bs[500, 2] = 1
# loading
loading = rep(0, p)
loading[499:500] = 1
# Ns
Ns = rep(n, L)
}
if(setting==5){
# The number of groups, L={2}
L = 2
# dimension
p = 500
# covariance matrix
cov.source = cov.gen(p, 0.6)
cov.target = cov.source
# diag(cov.target) = diag(cov.target) + 0.5
# for(i in 1:5){
#   for(j in 1:5){
#     if(i!=j) cov.target[i, j] = 0.6
#   }
# }
# for(i in 499:500){
#   for(j in 499:500){
#     if(i!=j) cov.target[i, j] = -0.9
#   }
# }
# generate mean for source and target data
mean.source = rep(0, p)
mean.target = rep(0, p)
# coefs
Bs = matrix(0, p, L)
Bs[1:10, 1] = seq(1:10)/40
Bs[22:23, 1] = 1
Bs[498,1] = 0.5
Bs[499,1] = -0.5
Bs[500,1] = -0.5
Bs[1:10, 2] = Bs[1:10, 1]
Bs[22:23, 2] = 1
Bs[500, 2] = 1
# loading
loading = rep(0, p)
loading[499:500] = 1
# Ns
Ns = rep(n, L)
}
if(setting==6){
# dimension
p = 500
# covariance matrix
cov.source = cov.gen(p, 0.6)
cov.target = cov.source
# generate mean for source and target data
mean.source = rep(0, p)
mean.target = rep(0, p)
L=2
perb<-0.2
Bs<-matrix(0,p,L)
Bs[1:10,1]<-seq(1:10)/40
Bs[22:23,1] <-1
Bs[500,1]<-perb
Bs[1:10, 2] <- Bs[1:10, 1]
Bs[22:23,2] <-1
Bs[500,2]<--perb
# loading
loading = rep(0, p)
loading[500] = 1
# Ns
Ns = rep(n, L)
}
if(setting==7){
# dimension
p = 500
# covariance matrix
cov.source = cov.gen(p, 0.6)
cov.target = cov.source
# generate mean for source and target data
mean.source = rep(0, p)
mean.target = rep(0, p)
L=2
perb<-0.2
Bs<-matrix(0,p,L)
Bs[1:10,1]<-seq(1:10)/40
Bs[22:23,1] <-1
Bs[500,1]<-perb
Bs[1:10, 2] <- Bs[1:10, 1]
Bs[22:23,2] <-1
Bs[500,2]<--2*perb
# loading
loading = rep(0, p)
loading[500] = 1
# Ns
Ns = rep(n, L)
}
if(setting==8){
# The number of groups, L={5}
L = 5
# dimension
p = 500
# covariance matrix
cov.source = cov.gen(p, 0.6)
cov.target = cov.source
for(i in 1:6){
for(j in 1:6){
if(i!=j){
cov.target[i,j]<-0.75
}
}
}
diag(cov.target) = diag(cov.target) + 0.1
# generate mean for source and target data
mean.source = rep(0, p)
mean.target = rep(0, p)
perb<-0.1
Bs<-matrix(0,p,L)
Bs[1:10,1]<-seq(1:10)/10
Bs[11:20,1]<--seq(1:10)/10
Bs[21,1]<-0.2
Bs[22:23,1]<-1
for(j in 2:L){
Bs[1:10,j]<-Bs[1:10,1]+(j-1)*perb/sqrt(300)
Bs[11:20,j]<--perb/sqrt(300)*3*(j-1)
Bs[21,j]<-0.5*(j-1)
Bs[22:23,j]<-0.2*(j-1)
}
loading<-rep(0,p)
loading[21:23]<-1
# Ns
Ns = rep(n, L)
}
if(setting==9){
# The number of groups, L={5}
L = 5
# dimension
p = 500
# covariance matrix
cov.source = cov.gen(p, 0.6)
cov.target = cov.source
for(i in 1:6){
for(j in 1:6){
if(i!=j){
cov.target[i,j]<-0.75
}
}
}
diag(cov.target) = diag(cov.target) + 0.1
# generate mean for source and target data
mean.source = rep(0, p)
mean.target = rep(0, p)
data<-read.table('Coef.txt',header=TRUE,sep=" ")
Bs<-as.matrix(data)[,1:L]
New_Obs<- read.csv(file="New_Obs_Logistic1.csv", header=TRUE, sep=",")
loading<- New_Obs[,1]/5
Ns = rep(n, L)
}
if(all(cov.source==cov.target)){
dataList <- gen.data.only.source(mean.source, cov.source, Bs, Ns, L)
s1List <- mm.s1(dataList$X.source, dataList$Y.source, dataList$idx.source,
NULL, loading, covariate.shift = FALSE)
}else{
N.target=2000
dataList <- gen.data.with.target(mean.source, cov.source, mean.target, cov.target,
N.target,Bs, Ns, L)
s1List <- mm.s1(dataList$X.source, dataList$Y.source, dataList$idx.source,
dataList$X.target, loading, covariate.shift = TRUE)
}
s3List0 <- mm.s3(s1List$gen.mu, s1List$gen.Cov, s1List$gen.dim, gen.size=gen.size, threshold=0)
pick2.001 <- pick.samples(s1List$gen.mu, s1List$gen.Cov, s1List$gen.dim, set.samples=s3List0$gen.samples, threshold=2, alpha=0.01)
s2List <- mm.s2(s1List$Gamma.prop, s1List$Coef.est, s1List$Point.vec, delta=delta)
s4List0 <- mm.s4(s1List$Point.vec, s1List$SE.vec, s1List$L, s3List0$gen.samples, s3List0$gen.size, delta=delta)
s4List2.001 <- pick.CI(s4List0$gen.est, pick2.001$index.thres)
# CI info
CI.store = matrix(NA, nrow=gen.size, ncol=4)
CI.store[1:gen.size,1] = s4List0$gen.est[,1] - 1.96*s4List0$gen.est[,2]
CI.store[1:gen.size,2] = s4List0$gen.est[,1] + 1.96*s4List0$gen.est[,2]
CI.store[1:pick2.001$pick.size,3] = s4List2.001$gen.est[,1] - 1.96*s4List2.001$gen.est[,2]
CI.store[1:pick2.001$pick.size,4] = s4List2.001$gen.est[,1] + 1.96*s4List2.001$gen.est[,2]
# points
point.est = s2List$point
returnList <- list("point.est"=point.est,
"CI.store"=CI.store)
return(returnList)
}
set.seed(0)
setting.outer = 2
returnList.outer <- intervals.100(setting.outer)
point.est.outer = returnList.outer$point.est
CI.store.outer = returnList.outer$CI.store
data.outer = na.omit(CI.store.outer[1:50,3:4])
df.outer = data.frame(seq(1,dim(data.outer)[1]), data.outer)
colnames(df.outer) <- c("Setting", "lower", "upper")
max.val.50 = max(df.outer[,3])
min.val.50 = min(df.outer[,2])
df.outer = cbind(df.outer, point=(df.outer[,2]+df.outer[,3])/2)
df.outer
ggplot(df.outer, aes(Setting))+
geom_linerange(aes(ymin=lower, ymax=upper),size=0.6)+
geom_point(aes(y=point), color='black', size=1.5)+
geom_segment(x=-1, y=min.val.50, xend=-1, yend=max.val.50, color="red", linewidth=1)+ # segment function is changing
# geom_segment(x=-5, y=point.est.outer+1.96*SE.outer, xend=-5, yend=point.est.outer-1.96*SE.outer, color="blue", size=1)+
# geom_hline(yintercept = 0.184466, color="black", linetype="dashed")+
geom_hline(yintercept = point.est.outer, color='black', linetype='dashed')+
geom_hline(yintercept = max.val.50, color="red", linetype=2)+
geom_hline(yintercept = min.val.50, color="red", linetype=2)+
labs(x="Sampling Index", y="Sampled CI")+ xlim(-1,50)
ggplot(df.outer, aes(Setting))+
geom_linerange(aes(ymin=lower, ymax=upper),size=0.6)+
geom_point(aes(y=point), color='black', size=1.5)+
geom_point(aes(x=30, y=point[30]), color='red', size=2)+
geom_segment(x=-1, y=min.val.50, xend=-1, yend=max.val.50, color="red", linewidth=1)+ # segment function is changing
# geom_segment(x=-5, y=point.est.outer+1.96*SE.outer, xend=-5, yend=point.est.outer-1.96*SE.outer, color="blue", size=1)+
# geom_hline(yintercept = 0.184466, color="black", linetype="dashed")+
geom_hline(yintercept = point.est.outer, color='black', linetype='dashed')+
geom_hline(yintercept = max.val.50, color="red", linetype=2)+
geom_hline(yintercept = min.val.50, color="red", linetype=2)+
labs(x="Sampling Index", y="Sampled CI")+ xlim(-1,50)
ggplot(df.outer, aes(Setting))+
geom_linerange(aes(ymin=lower, ymax=upper),size=0.6)+
geom_point(aes(y=point), color='black', size=1.5)+
geom_point(aes(x=30, y=point[30]), color='red', size=2)+
geom_point(aes(x=48, y=point[48]), color='red', size=2)+
geom_segment(x=-1, y=min.val.50, xend=-1, yend=max.val.50, color="red", linewidth=1)+ # segment function is changing
# geom_segment(x=-5, y=point.est.outer+1.96*SE.outer, xend=-5, yend=point.est.outer-1.96*SE.outer, color="blue", size=1)+
# geom_hline(yintercept = 0.184466, color="black", linetype="dashed")+
geom_hline(yintercept = point.est.outer, color='black', linetype='dashed')+
geom_hline(yintercept = max.val.50, color="red", linetype=2)+
geom_hline(yintercept = min.val.50, color="red", linetype=2)+
labs(x="Sampling Index", y="Sampled CI")+ xlim(-1,50)
ggplot(df.outer, aes(Setting))+
geom_linerange(aes(ymin=lower, ymax=upper),size=0.6)+
geom_point(aes(y=point), color='black', size=1.5)+
geom_point(aes(x=30, y=point[30]), color='blue', size=2)+
geom_point(aes(x=48, y=point[48]), color='blue', size=2)+
geom_segment(x=-1, y=min.val.50, xend=-1, yend=max.val.50, color="red", linewidth=1)+ # segment function is changing
# geom_segment(x=-5, y=point.est.outer+1.96*SE.outer, xend=-5, yend=point.est.outer-1.96*SE.outer, color="blue", size=1)+
# geom_hline(yintercept = 0.184466, color="black", linetype="dashed")+
geom_hline(yintercept = point.est.outer, color='black', linetype='dashed')+
geom_hline(yintercept = max.val.50, color="blue", linetype=2)+
geom_hline(yintercept = min.val.50, color="blue", linetype=2)+
labs(x="Sampling Index", y="Sampled CI")+ xlim(-1,50)
ggplot(df.outer, aes(Setting))+
geom_linerange(aes(ymin=lower, ymax=upper),size=0.6)+
geom_point(aes(y=point), color='black', size=1.5)+
geom_point(aes(x=30, y=point[30]), color='red', size=2)+
geom_point(aes(x=48, y=point[48]), color='red', size=2)+
geom_segment(x=-1, y=min.val.50, xend=-1, yend=max.val.50, color="blue", linewidth=0.85)+ # segment function is changing
# geom_segment(x=-5, y=point.est.outer+1.96*SE.outer, xend=-5, yend=point.est.outer-1.96*SE.outer, color="blue", size=1)+
# geom_hline(yintercept = 0.184466, color="black", linetype="dashed")+
geom_hline(yintercept = point.est.outer, color='black', linetype='dashed')+
geom_hline(yintercept = max.val.50, color="blue", linetype=2)+
geom_hline(yintercept = min.val.50, color="blue", linetype=2)+
labs(x="Sampling Index", y="Sampled CI")+ xlim(-1,50)
ggplot(df.outer, aes(Setting))+
geom_linerange(aes(ymin=lower, ymax=upper),size=0.6)+
geom_point(aes(y=point), color='black', size=1.5)+
geom_point(aes(x=30, y=point[30]), color='red', size=2)+
geom_point(aes(x=48, y=point[48]), color='red', size=2)+
geom_segment(x=-1, y=min.val.50, xend=-1, yend=max.val.50, color="red", linewidth=0.85)+ # segment function is changing
# geom_segment(x=-5, y=point.est.outer+1.96*SE.outer, xend=-5, yend=point.est.outer-1.96*SE.outer, color="blue", size=1)+
# geom_hline(yintercept = 0.184466, color="black", linetype="dashed")+
geom_hline(yintercept = point.est.outer, color='black', linetype='dashed')+
geom_hline(yintercept = max.val.50, color="red", linetype=2)+
geom_hline(yintercept = min.val.50, color="red", linetype=2)+
labs(x="Sampling Index", y="Sampled CI")+ xlim(-1,50)
ggplot(df.outer, aes(Setting))+
geom_linerange(aes(ymin=lower, ymax=upper),size=0.6)+
geom_linerange(aes(x=30, ymin=lower[30], ymax=upper[30]), size=0.8)+
geom_point(aes(y=point), color='black', size=1.5)+
geom_point(aes(x=30, y=point[30]), color='red', size=2)+
geom_point(aes(x=48, y=point[48]), color='red', size=2)+
geom_segment(x=-1, y=min.val.50, xend=-1, yend=max.val.50, color="red", linewidth=0.85)+ # segment function is changing
# geom_segment(x=-5, y=point.est.outer+1.96*SE.outer, xend=-5, yend=point.est.outer-1.96*SE.outer, color="blue", size=1)+
# geom_hline(yintercept = 0.184466, color="black", linetype="dashed")+
geom_hline(yintercept = point.est.outer, color='black', linetype='dashed')+
geom_hline(yintercept = max.val.50, color="red", linetype=2)+
geom_hline(yintercept = min.val.50, color="red", linetype=2)+
labs(x="Sampling Index", y="Sampled CI")+ xlim(-1,50)
ggplot(df.outer, aes(Setting))+
geom_linerange(aes(ymin=lower, ymax=upper),size=0.6)+
geom_linerange(aes(x=30, ymin=lower[30], ymax=upper[30]), color='red',size=0.8)+
geom_point(aes(y=point), color='black', size=1.5)+
geom_point(aes(x=30, y=point[30]), color='red', size=2)+
geom_point(aes(x=48, y=point[48]), color='red', size=2)+
geom_segment(x=-1, y=min.val.50, xend=-1, yend=max.val.50, color="red", linewidth=0.85)+ # segment function is changing
# geom_segment(x=-5, y=point.est.outer+1.96*SE.outer, xend=-5, yend=point.est.outer-1.96*SE.outer, color="blue", size=1)+
# geom_hline(yintercept = 0.184466, color="black", linetype="dashed")+
geom_hline(yintercept = point.est.outer, color='black', linetype='dashed')+
geom_hline(yintercept = max.val.50, color="red", linetype=2)+
geom_hline(yintercept = min.val.50, color="red", linetype=2)+
labs(x="Sampling Index", y="Sampled CI")+ xlim(-1,50)
ggplot(df.outer, aes(Setting))+
geom_linerange(aes(ymin=lower, ymax=upper),size=0.6)+
geom_linerange(aes(x=30, ymin=lower[30], ymax=upper[30]), color='red',size=0.8)+
geom_linerange(aes(x=48, ymin=lower[48], ymax=upper[48]), color='red',size=0.8)+
geom_point(aes(y=point), color='black', size=1.5)+
geom_point(aes(x=30, y=point[30]), color='red', size=2)+
geom_point(aes(x=48, y=point[48]), color='red', size=2)+
geom_segment(x=-1, y=min.val.50, xend=-1, yend=max.val.50, color="black", linewidth=0.85)+ # segment function is changing
# geom_segment(x=-5, y=point.est.outer+1.96*SE.outer, xend=-5, yend=point.est.outer-1.96*SE.outer, color="blue", size=1)+
# geom_hline(yintercept = 0.184466, color="black", linetype="dashed")+
geom_hline(yintercept = point.est.outer, color='black', linetype='dashed')+
geom_hline(yintercept = max.val.50, color="red", linetype=2)+
geom_hline(yintercept = min.val.50, color="red", linetype=2)+
labs(x="Sampling Index", y="Sampled CI")+ xlim(-1,50)
setwd("~/github/maximin_reproduce/main-Settings")
filename <- paste("Setting-(I",setting,")-L",L,"-n",n,"-p",p,".RData", sep="")
save.image(filename)
